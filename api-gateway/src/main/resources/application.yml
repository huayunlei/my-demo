server:
  port: 9201

service-url:
  user-service: http://localhost:8080
spring:
  redis:
    cluster:
      nodes: 10.101.31.6:8000,10.101.31.9:8000,10.101.31.10:8000
  cloud:
    gateway:
      routes:
        - id: path_route #路由的ID
          uri: ${service-url.user-service}/user/** #匹配后路由地址
          predicates: # 断言，路径相匹配的进行路由
            - Path=/user/**
        - id: hystrix_route
          uri: http://localhost:8201
          predicates:
            - Path=/hystrix/*
          filters:
            - name: Hystrix
              args:
                name: fallbackcmd
                fallbackUri: forward:/fallback
        - id: requestratelimiter_route
          uri: ${service-url.user-service}/ratelimit/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1 #每秒允许处理的请求数量
                redis-rate-limiter.burstCapacity: 2 #每秒最大处理的请求数量
                key-resolver: "#{@ipKeyResolver}" #限流策略，对应策略的Bean
          predicates:
            - Path=/ratelimit/**
#        - id: retry_route
#          uri: ${service-url.user-service}
#          predicates:
#            - Method=GET
#          filters:
#            - name: Retry
#              args:
#                retries: 1 #需要进行重试的次数
#                statuses: BAD_GATEWAY #返回哪个状态码需要进行重试，返回状态码为5XX进行重试
#                backoff:
#                  firstBackoff: 10ms
#                  maxBackoff: 50ms
#                  factor: 2
#                  basedOnPreviousValue: false

logging:
  level:
    org.springframework.cloud.gateway: debug